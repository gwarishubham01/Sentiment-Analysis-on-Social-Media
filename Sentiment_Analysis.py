# -*- coding: utf-8 -*-
"""Sentiment_Analysis_on_Social_Media.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HqVGRnbIroPtJk4IpVw3JVxf5De0W3Hd
"""

pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
#This above line is used to install the PyTorch library, along with its associated packages torchvision and torchaudio, using the Python package manager pip.
pip install transformers requests beautifulsoup4
#The transformers package provides pre-trained models for various NLP tasks, such as text classification, translation, and text generation.
#The requests library is commonly used for making HTTP requests in Python.
#BeautifulSoup is a Python library for web scraping and parsing HTML and XML documents. It's used to extract information from web pages, such as scraping data from websites or parsing HTML documents for specific content.
import pandas as pd
import numpy as np
import torch
import requests
from bs4 import BeautifulSoup
import re
#In Python, import re is a statement used to import the re module, which stands for "regular expressions."  The re module is a built-in Python module that provides functions and methods for working with regular expressions, a powerful tool for pattern matching and text manipulation.
from transformers import AutoTokenizer, AutoModelForSequenceClassification
tokenizer = AutoTokenizer.from_pretrained("nlptown/bert-base-multilingual-uncased-sentiment")
model = AutoModelForSequenceClassification.from_pretrained("nlptown/bert-base-multilingual-uncased-sentiment")
#"https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment"
r=requests.get('https://www.yelp.com/biz/dennys-san-francisco-2')
soup = BeautifulSoup(r.text,'html.parser')
regex = re.compile('.*comment*.')
results= soup.find_all('p',{'class':regex})
reviews = [result.text for result in results]

df = pd.DataFrame(np.array(reviews),columns = ['review'])

def Sentiment_Score(review):
  tokens = tokenizer.encode(review, return_tensors='pt')
  result = model(tokens)
  return int(torch.argmax(result.logits))+1

df['sentiment'] = df['review'].apply(lambda x: Sentiment_Score(x[:512]))

df

